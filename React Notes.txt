JS library for building fast and interactive UI and single page applications.

Declarative View --> It dynamically loads particular parts of the page instead of loading them whole. / efficiently update and render just the right components when your data changes.

React is the view layer of an MVC application.

It is a component based library, and allows to build encapsulated components that manages their own state, then compose them to make complex UIs. 

Hot Reloading--> as we change anything, the modification is directly and instantly reflected on the run time.

*************************************************************************************************
WHY REACT???? REAL VS VIRTUAL DOM

--> Real DOM:
1- It updates slow. 
2- Can directly update HTML.
3- Creates a new DOM if element updates.
4- DOM manipulation is very expensive.
5- Memory wastage.

--> Virtual DOM:
1- It updates faster.
2- Can't directly update HTML.
3- Updates the JSX if element updates.
4- DOM manipulation is very easy.
5- No memory wastage.

React compares the state with the actual DOM and changes the changed states only in the virtual DOM. This is why React is called as React, as it reacts to the state changes.

*************************************************************************************************
--node package manager (npm)--> lets you install the packages.
--node package execute (npx)--> when we want to execute the packages, and not execute them.
--Development Server--> npm start prepares a dev server of react.
--node modules--> packages and all dependencies
--public--> main folder
--package.json--> dependencies created by react app, and the further dependencies will also be stored here. 
--.gitignore--> include packages or files that you do not want to push on github. 

GETTING STARTED WITH REACT
node --version
npm --version
npx --v
npx create-react-app react-app-name
cd your-react-folder
npm start

*************************************************************************************************
--> What is JSX??

- JSX stands for JavaScript XML.
- JSX allows us to write HTML in React.
- JSX makes it easier to write and add HTML in React.
- JSX will throw an error if the HTML is not correct, or if the HTML misses a parent element.
- Alternatively, you can use a "fragment" to wrap multiple lines. This will prevent unnecessarily adding extra nodes to the DOM.
- React supports if statements, but not inside JSX.
- To be able to use conditional statements in JSX, you should put the if statements outside of the JSX, or you could use a ternary expression instead.

*************************************************************************************************
--> How To Use BootStrap in React?
-npm install BootStrap
-import 'bootstrap/dist/css/bootstrap.css'; (add this in /src/index.js)

then to add the bootstrap elements in react use html to jsx convertor such as: https://transform.tools/html-to-jsx

*************************************************************************************************
Props--> Can not be changed, as all the components in react are pure functions.
Pure Function--> If the input of the function is unchanged, then its output will always remain same.

For loops doesn't work in React, hence we use forEach() or map() to iterate over the props.
 

*************************************************************************************************
HOOKS IN REACT JS:
- Hooks allow function components to have access to state and other React features. Because of this, class components are generally no longer needed.
- Hooks allow us to "hook" into React features such as state and lifecycle methods.

Hook Rules
There are 3 rules for hooks:
1- Hooks can only be called inside React function components.
2- Hooks can only be called at the top level of a component.
3- Hooks cannot be conditional

*************************************************************************************************
useState
We initialize our state by calling useState in our function component.
useState accepts an initial state and returns two values:
1- The current state.
2- A function that updates the state.

import { useState } from "react";
function FavoriteColor() {
  const [color, setColor] = useState("");
}
The first value, color, is our current state.
The second value, setColor, is the function that is used to update our state.


==> Objects in State
Create a single Hook that holds an object:

import { useState } from "react";
import ReactDOM from "react-dom/client";
function Car() {
  const [car, setCar] = useState({
    brand: "Ford",
    model: "Mustang",
    year: "1964",
    color: "red"
  });
  return (
    <>
      <h1>My {car.brand}</h1>
      <p>
        It is a {car.color} {car.model} from {car.year}.
      </p> </>)}
Since we are now tracking a single object, we need to reference that object and then the property of that object when rendering the component. (Ex: car.brand)


==> Updating Objects and Arrays in State
When state is updated, the entire state gets overwritten.
What if we only want to update the color of our car?
If we only called setCar({color: "blue"}), this would remove the brand, model, and year from our state.
We can use the JavaScript spread operator to help us.
import { useState } from "react";
import ReactDOM from "react-dom/client";

function Car() {
  const [car, setCar] = useState({
    brand: "Ford",
    model: "Mustang",
    year: "1964",
    color: "red"
  });

  const updateColor = () => {
    setCar(previousState => {
      return { ...previousState, color: "blue" }
    });
  }
}

*************************************************************************************************
useEffect
- The useEffect Hook allows you to perform side effects in your components.
- Some examples of side effects are: fetching data, directly updating the DOM, and timers.
- useEffect accepts two arguments. The second argument is optional.
- useEffect(<function>, <dependency>)
- useEffect runs on every render. That means that when the count changes, a render happens, which then triggers another effect.
- This is not what we want. There are several ways to control when side effects run.
- We should always include the second parameter which accepts an array. We can optionally pass dependencies to useEffect in this array.

1. No dependency passed:
useEffect(() => {
  //Runs on every render
});

Only run the effect on the initial render
useEffect(() => {
setTimeout(() => {
    setCount((count) => count + 1);
}, 1000);
}, []); // <- add empty brackets here

2. An empty array:
useEffect(() => {
  //Runs only on the first render
}, []);

3. Props or state values:
useEffect(() => {
  //Runs on the first render
  //And any time any dependency value changes
}, [prop, state]);

Here is an example of a useEffect Hook that is dependent on a variable. If the count variable updates, the effect will run again:
const [calculation, setCalculation] = useState(0);
useEffect(() => {
setCalculation(() => count * 2);
}, [count]); // <- add the count variable here


Effect Cleanup
- Some effects require cleanup to reduce memory leaks.
- Timeouts, subscriptions, event listeners, and other effects that are no longer needed should be disposed.
- We do this by including a return function at the end of the useEffect Hook.

const [count, setCount] = useState(0);
useEffect(() => {
let timer = setTimeout(() => {
setCount((count) => count + 1);
}, 1000);

return () => clearTimeout(timer)
}, []);


*************************************************************************************************
useContext